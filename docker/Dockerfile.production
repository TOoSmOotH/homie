# Multi-stage build for optimized production image  
FROM node:22-alpine AS base
RUN apk add --no-cache dumb-init curl

# Build dependencies stage
FROM base AS build-base
RUN apk add --no-cache python3 py3-setuptools make g++ sqlite-dev

# Dependencies stage - install all dependencies with workspaces
FROM build-base AS dependencies
WORKDIR /app

# Copy all package files and lock file
COPY package*.json ./
COPY backend/package*.json ./backend/
COPY frontend/package*.json ./frontend/
COPY shared/package*.json ./shared/

# Install all dependencies including dev dependencies for build
RUN npm ci --include=dev

# Backend build stage
FROM dependencies AS backend-builder
WORKDIR /app

# Copy source code
COPY backend ./backend
COPY shared ./shared

# Build shared first
RUN npm run build --workspace=@homie/shared

# Then build backend
WORKDIR /app/backend
RUN npx tsc
WORKDIR /app

# Frontend build stage
FROM dependencies AS frontend-builder
WORKDIR /app

# Copy source code
COPY frontend ./frontend
COPY shared ./shared

# Build shared first
RUN npm run build --workspace=@homie/shared

# Then build frontend with explicit working directory
WORKDIR /app/frontend
RUN npx vite build
WORKDIR /app

# Production stage
FROM base AS production

# Install runtime dependencies only (no nginx; SSL handled by reverse proxy)
RUN apk add --no-cache sqlite

# Create app user for security
RUN addgroup -g 1001 -S appuser && \
    adduser -S -D -H -u 1001 -h /app -s /sbin/nologin -G appuser -g appuser appuser

# Set working directory
WORKDIR /app

# Copy package files for production
COPY package*.json ./
COPY backend/package*.json ./backend/
COPY shared/package*.json ./shared/

# Install production dependencies with native modules support
RUN apk add --no-cache --virtual .build-deps python3 py3-setuptools make g++ && \
    npm ci --omit=dev && \
    apk del .build-deps

# Ensure marketplace is remote-only in production
ENV MARKETPLACE_DISABLE_LOCAL=true 

# Copy built backend
COPY --from=backend-builder --chown=appuser:appuser /app/backend/dist ./backend/dist
COPY --from=backend-builder --chown=appuser:appuser /app/shared/dist ./shared/dist

# Copy frontend build to nginx directory
COPY --from=frontend-builder --chown=appuser:appuser /app/frontend/dist /app/backend/dist/public

# Copy configuration files
COPY --chown=appuser:appuser scripts/start.sh /app/start.sh
COPY --chown=appuser:appuser scripts/healthcheck.sh /app/healthcheck.sh

# Make scripts executable
RUN chmod +x /app/start.sh /app/healthcheck.sh

# Create necessary directories with proper permissions
RUN mkdir -p /app/data /app/logs && \
    chown -R appuser:appuser /app/data /app/logs

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD /app/healthcheck.sh

# Expose backend HTTP port
EXPOSE 9825

# Don't switch user here - start.sh will handle permissions
# USER appuser

# Use dumb-init for proper signal handling
CMD ["dumb-init", "--", "/app/start.sh"]
